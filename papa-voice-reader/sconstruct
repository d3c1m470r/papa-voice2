#!/usr/bin/env python3

import os
import zipfile
import shutil

AddOption('--version', dest='version', default='1.0.0', help='Version of the addon')

# Configuration
addonName = 'papaVoiceReader'
addonVersion = GetOption('version')
addonOutputName = f'{addonName}-{addonVersion}.nvda-addon'

# Source files
addonDir = 'addon'
manifestFile = 'manifest.ini'

# Create the addon package
def createAddonPackage(target, source, env):
    """Create the NVDA addon package"""
    print(f"Creating addon package: {target[0]}")
    
    with zipfile.ZipFile(str(target[0]), 'w', zipfile.ZIP_DEFLATED) as zf:
        # Add manifest
        zf.write(manifestFile, manifestFile)
        
        # Add addon directory recursively
        for root, dirs, files in os.walk(addonDir):
            for file in files:
                filepath = os.path.join(root, file)
                # Skip test files and __pycache__
                if '__pycache__' in filepath or filepath.endswith('.pyc'):
                    continue
                if 'test_' in file:
                    continue
                arcname = os.path.relpath(filepath, '.')
                zf.write(filepath, arcname)
    
    print(f"Addon package created successfully: {target[0]}")
    return None

# Build the addon
addon = Command(addonOutputName, [manifestFile, addonDir], createAddonPackage)
Alias('addon', addon)
Default(addon)

# Clean target
def cleanBuild(target, source, env):
    """Clean build artifacts"""
    if os.path.exists(addonOutputName):
        os.remove(addonOutputName)
        print(f"Removed {addonOutputName}")
    # Clean __pycache__ directories
    for root, dirs, files in os.walk('.'):
        for d in dirs:
            if d == '__pycache__':
                shutil.rmtree(os.path.join(root, d))
                print(f"Removed {os.path.join(root, d)}")
    return None

cleanTarget = Command('clean', [], cleanBuild)
Alias('clean', cleanTarget)